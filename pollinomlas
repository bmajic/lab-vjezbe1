#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define MAXLINE 1024



typedef struct polly* position;
struct polly {

	int coeff;
	int exp;
	position next;

};

int InsertSorted(position head, position nE)
{
	position temp = head;

	while (temp->next != NULL && temp->next->exp > nE->exp)
	{
		temp = temp->next;

	}

	if (temp->next != NULL && temp->next->exp == nE->exp)
	{

		temp->next->coeff += nE->coeff;
		if (temp->next->coeff == 0)
		{

			position toDelete = temp->next;
			temp->next = temp->next->next;
			free(toDelete);

		}

		free(nE);
	}

	else {
	
		nE->next = temp->next;
		temp->next = nE;
	
	}
	return 0;
}

position CreateNewElement(int coeff, int exp)
{
	position nE = (position)malloc(sizeof(polly));

	if (!nE)
	{
		printf("Erorr in malloc!");
		return NULL;
	}

	nE->coeff = coeff;
	nE->exp = exp;
	nE->next = NULL;

	return nE;


}

int ReadFromFile(const char* filename, position head)
{

	FILE* fp = fopen(filename, "r");

	if (fp == NULL)
	{
		printf("erorr in files opening!");
		return;
	}

	char buffer[MAXLINE];
	int c, e, numBytes;
	position nE;


	while (fgets(buffer, MAXLINE, fp) != NULL) {


		while (strlen(buffer) > 0)
		{
			int status = sscanf(buffer, " %d %d %n", &c, &e, &numBytes);
			if (status < 2)
			{
		
				break;
			}

			nE = CreateNewElement(c, e);
			if (!nE) {
				fclose(fp);
				return -1;
			}

			InsertSorted(head, nE);
			buffer += numBytes;
		}

	}
	fclose(fp);
	return 0;
}


position Addpolly(position head1, position head2)
{
	position resultHead = (position)malloc(sizeof(polly));
	if (resultHead == NULL)
	{
		printf("Erorr in malloc! ");
		return NULL;
	}

	resultHead->next = NULL;

	position temp1 = head1;
	position temp2 = head2;

	while (temp1 != NULL)
	{
		position nE = (position)malloc(sizeof(polly));
		if (nE == NULL)
		{
			printf("Error in malloc!");
			return NULL;
		}

		nE->coeff = temp1->coeff;
		nE->exp = temp1->exp;
		nE->next = NULL;

		InsertSorted(resultHead, nE);
		temp1 = temp1->next;
	}


	while(temp2 != NULL)
	{
		position nE = (position)malloc(sizeof(polly));
		if (nE == NULL)
		{
			printf("Error in malloc!");
			return NULL;
		}

		nE->coeff = temp2->coeff;
		nE->exp = temp2->exp;
		nE->next = NULL;

		InsertSorted(resultHead, nE);
		temp2 = temp2->next;
	}


	return resultHead->next;
}
      


int multiplePollz(position head,position polly1,position polly2) {

	position temp1 = polly1->next;
	position temp2 = NULL;


	while (temp1 != NULL)
	{
		temp2 = polly2->next;

		while(temp2 != NULL)
		{
			int newCoeff = temp1->coeff * temp2->coeff;
			int newExp = temp1->exp + temp2->exp;

		position nE  =	CreateNewElement(newCoeff, newExp);
		InsertSorted(head, nE);
		temp2 = temp2->next;

		}

		temp1 = temp1->next;
	}
	return 0;
}

void print(position head){

	position temp = head;

	while (temp != NULL)
	{
		printf("%d X ^ %d", temp->coeff, temp->exp);
		temp = temp->next;
	}
	return;

}



int main()
{
	position head1 = (position)malloc(sizeof(polly));
	position head2 = (position)malloc(sizeof(polly));
	position resulthead = (position)malloc(sizeof(polly));


	if (!head1 || !head2 || !resulthead) {
		printf("Memory allocation error.\n");
		return -1;
	}


	head1->next = NULL;
	head2->next = NULL;
	resulthead->next = NULL;


	if (ReadFromFile("polly1.txt", head1) != NULL)
	{
		printf("Erorr in file openig");
		return -1;
	}



	if (ReadFromFile("polly2.txt", head2) != NULL)
	{
		printf("Erorr in file openig");
		return -1;
	}


	printf("Polynomial 1: ");
	print(head1->next);
	printf("\n");

	printf("Polynomial 2: ");
	print(head2->next);
	printf("\n");



	position sumHead = (position)malloc(sizeof(polly));
	if (!sumHead)
	{
		return -1;
	}

	sumHead->next = NULL;

	sumHead = Addpolly(head1->next, head2->next);

	printf("Sum of polynomals: ");
	print(sumHead);
	printf("\n");

	position productHead = (position)malloc(sizeof(polly));
	if (!productHead)
	{
		return - 1;
	}

	productHead->next = NULL;

	multiplePollz(productHead, head1, head2);

	printf("Product of polynomals ");
	print(productHead->next);
	printf("\n");

	free(head1);
	free(head2);
	free(resulthead);
	free(sumHead);
	free(productHead);

	return 0;
}



